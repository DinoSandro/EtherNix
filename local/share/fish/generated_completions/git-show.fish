# git-show
# Autogenerated from man page /run/current-system/sw/share/man/man1/git-show.1.gz
complete -c git-show -l pretty -l format -d 'Pretty-print the contents of the commit logs in a given format, where <format…'
complete -c git-show -l abbrev-commit -d 'Instead of showing the full 40-byte hexadecimal commit object name, show a pr…'
complete -c git-show -l no-abbrev-commit -d 'Show the full 40-byte hexadecimal commit object name'
complete -c git-show -l oneline -d 'This is a shorthand for "--pretty=oneline --abbrev-commit" used together'
complete -c git-show -l encoding -d 'Commit objects record the character encoding used for the log message in thei…'
complete -c git-show -l expand-tabs -l expand-tabs -l no-expand-tabs -d 'Perform a tab expansion (replace each tab with enough spaces to fill to the n…'
complete -c git-show -l notes -d 'Show the notes (see git-notes(1)) that annotate the commit, when showing the …'
complete -c git-show -l no-notes -d 'Do not show notes'
complete -c git-show -l show-notes-by-default -d 'Show the default notes unless options for displaying specific notes are given'
complete -c git-show -l show-notes -l standard-notes -d 'These options are deprecated'
complete -c git-show -l show-signature -d 'Check the validity of a signed commit object by passing the signature to gpg …'
complete -c git-show -l date -d 'unless another'
complete -c git-show -l decorate -d and
complete -c git-show -l walk-reflogs -d 'oc o 2'
complete -c git-show -l no-abbrev -d 'oc o 2'
complete -c git-show -l color -d 'auto settings of the former if we are going to a terminal).  %C(auto,'
complete -c git-show -s g -d option
complete -c git-show -l unfold -d 'option was given.  E. g'
complete -c git-show -s p -s u -l patch -d 'Generate patch (see the section called “GENERATING PATCH TEXT WITH -P”)'
complete -c git-show -s s -l no-patch -d 'Suppress all output from the diff machinery'
complete -c git-show -l stat -d 'earlier on the command line in an alias'
complete -c git-show -s m -d 'Show diffs for merge commits in the default format.  This is similar to'
complete -c git-show -l diff-merges
complete -c git-show -s c -d 'Produce combined diff output for merge commits.  Shortcut for'
complete -c git-show -l cc -d 'Produce dense combined diff output for merge commits.  Shortcut for'
complete -c git-show -l dd -d 'Produce diff with respect to first parent for both merge and regular commits'
complete -c git-show -l remerge-diff -d 'Produce remerge-diff output for merge commits.  Shortcut for'
complete -c git-show -l no-diff-merges -d 'Synonym for'
complete -c git-show -l first-parent -d 'is in use, in which case first-parent is the default'
complete -c git-show -l combined-all-paths -d 'This flag causes combined diffs (used for merge commits) to list the name of …'
complete -c git-show -o 'U<n>' -l unified -d 'Generate diffs with <n> lines of context instead of the usual three.  Implies'
complete -c git-show -l output -d 'Output to a specific file instead of stdout'
complete -c git-show -l output-indicator-new -l output-indicator-old -l output-indicator-context -d 'Specify the character used to indicate new, old or context lines in the gener…'
complete -c git-show -l raw -d 'For each commit, show a summary of changes using the raw diff format'
complete -c git-show -l patch-with-raw -d 'Synonym for'
complete -c git-show -s t -d 'Show the tree objects in the diff output'
complete -c git-show -l indent-heuristic -d 'Enable the heuristic that shifts diff hunk boundaries to make patches easier …'
complete -c git-show -l no-indent-heuristic -d 'Disable the indent heuristic'
complete -c git-show -l minimal -d 'Spend extra time to make sure the smallest possible diff is produced'
complete -c git-show -l patience -d 'Generate a diff using the "patience diff" algorithm'
complete -c git-show -l histogram -d 'Generate a diff using the "histogram diff" algorithm'
complete -c git-show -l anchored -d 'Generate a diff using the "anchored diff" algorithm'
complete -c git-show -l diff-algorithm -d 'Choose a diff algorithm'
complete -c git-show -l stat-graph-width -d 'or by setting diff. statGraphWidth=<width>.  Using'
complete -c git-show -l stat-width
complete -c git-show -l stat-name-width -d and
complete -c git-show -l stat-count
complete -c git-show -l compact-summary -d 'Output a condensed summary of extended header information such as file creati…'
complete -c git-show -l numstat -d 'Similar to'
complete -c git-show -l shortstat -d 'Output only the last line of the'
complete -c git-show -o 'X[<param1' -l dirstat -d 'Output the distribution of relative amount of changes for each sub-directory'
complete -c git-show -l '*stat' -d options
complete -c git-show -l cumulative -d 'Synonym for --dirstat=cumulative'
complete -c git-show -l dirstat-by-file -d 'Synonym for --dirstat=files,<param1>,<param2>'
complete -c git-show -l summary -d 'Output a condensed summary of extended header information such as creations, …'
complete -c git-show -l patch-with-stat -d 'Synonym for'
complete -c git-show -s z -d 'Separate the commits with NULs instead of newlines.  Also, when'
complete -c git-show -l name-only -d 'Show only names of changed files.  The file names are often encoded in UTF-8'
complete -c git-show -l name-status -d 'Show only names and status of changed files.  See the description of the'
complete -c git-show -l diff-filter -d 'option on what the status letters mean.  Just like'
complete -c git-show -l submodule -d 'Specify how differences in submodules are shown.  When specifying'
complete -c git-show -l no-color -d 'Turn off colored diff.  It is the same as'
complete -c git-show -l color-moved -d 'Moved lines of code are colored differently'
complete -c git-show -l no-color-moved -d 'Turn off move detection.  This can be used to override configuration settings'
complete -c git-show -l color-moved-ws -d 'This configures how whitespace is ignored when performing the move detection …'
complete -c git-show -l no-color-moved-ws -d 'Do not ignore whitespace when performing move detection'
complete -c git-show -l word-diff -d 'Show a word diff, using the <mode> to delimit changed words'
complete -c git-show -l word-diff-regex -d below
complete -c git-show -l color-words -d 'Equivalent to'
complete -c git-show -l no-renames -d 'Turn off rename detection, even when the configuration file gives the default…'
complete -c git-show -l rename-empty -d 'Whether to use empty blobs as rename source'
complete -c git-show -l check -d 'Warn if changes introduce conflict markers or whitespace errors'
complete -c git-show -l ws-error-highlight -d 'Highlight whitespace errors in the context, old or new lines of the diff'
complete -c git-show -l full-index -d 'Instead of the first handful of characters, show the full pre- and post-image…'
complete -c git-show -l binary -d 'In addition to'
complete -c git-show -l abbrev -d 'Instead of showing the full 40-byte hexadecimal object name in diff-raw forma…'
complete -c git-show -s B -l break-rewrites -d 'Break complete rewrite changes into pairs of delete and create'
complete -c git-show -o 'B/70%' -d 'specifies that less than 30% of the original should remain in the result for …'
complete -c git-show -o 'B20%' -d 'specifies that a change with addition and deletion compared to 20% or more of…'
complete -c git-show -s M -l find-renames -d 'If generating diffs, detect and report renames for each commit'
complete -c git-show -l follow -d 'n is specified, it is a threshold on the similarity index (i. e'
complete -c git-show -o 'M90%' -d 'means Git should consider a delete/add pair to be a rename if more than 90% o…'
complete -c git-show -o M5 -d 'becomes 0. 5, and is thus the same as'
complete -c git-show -o 'M50%'
complete -c git-show -o M05 -d 'is the same as'
complete -c git-show -o 'M5%'
complete -c git-show -o 'M100%'
complete -c git-show -s C -l find-copies -d 'Detect copies as well as renames.  See also'
complete -c git-show -l find-copies-harder -d 'n is specified, it has the same meaning as for'
complete -c git-show -o 'M<n>'
complete -c git-show -s D -l irreversible-delete -d 'Omit the preimage for deletes, i. e'
complete -c git-show -o 'l<num>' -d The
complete -c git-show -o 'S<string>' -d 'Look for differences that change the number of occurrences of the specified s…'
complete -c git-show -s S -d 'Binary files are searched as well'
complete -c git-show -o 'G<regex>' -d 'Look for differences whose patch text contains added/removed lines that match…'
complete -c git-show -o 'S<regex>' -l pickaxe-regex -d and
complete -c git-show -l text -d 'is supplied patches of binary files without a textconv filter will be ignored'
complete -c git-show -l find-object -d 'Look for differences that change the number of occurrences of the specified o…'
complete -c git-show -l pickaxe-all -d When
complete -c git-show -s G -d 'finds a change, show all the changes in that changeset, not just the files th…'
complete -c git-show -o 'O<orderfile>' -d 'Control the order in which files appear in the output'
complete -c git-show -o O/dev/null -d 'The output order is determined by the order of glob patterns in <orderfile>'
complete -c git-show -l skip-to -l rotate-to -d 'Discard the files before the named <file> from the output (i. e'
complete -c git-show -s R -d 'Swap two inputs; that is, show differences from index or on-disk file to tree…'
complete -c git-show -l relative -l no-relative -d 'When run from a subdirectory of the project, it can be told to exclude change…'
complete -c git-show -s a -d 'Treat all files as text'
complete -c git-show -l ignore-cr-at-eol -d 'Ignore carriage-return at the end of line when doing a comparison'
complete -c git-show -l ignore-space-at-eol -d 'Ignore changes in whitespace at EOL'
complete -c git-show -s b -l ignore-space-change -d 'Ignore changes in amount of whitespace'
complete -c git-show -s w -l ignore-all-space -d 'Ignore whitespace when comparing lines'
complete -c git-show -l ignore-blank-lines -d 'Ignore changes whose lines are all blank'
complete -c git-show -o 'I<regex>' -l ignore-matching-lines -d 'Ignore changes whose all lines match <regex>'
complete -c git-show -l inter-hunk-context -d 'Show the context between diff hunks, up to the specified number of lines, the…'
complete -c git-show -s W -l function-context -d 'Show whole function as context lines for each change'
complete -c git-show -l ext-diff -d 'Allow an external diff helper to be executed'
complete -c git-show -l no-ext-diff -d 'Disallow external diff drivers'
complete -c git-show -l textconv -l no-textconv -d 'Allow (or disallow) external text conversion filters to be run when comparing…'
complete -c git-show -l ignore-submodules -d 'Ignore changes to submodules in the diff generation'
complete -c git-show -l src-prefix -d 'Show the given source prefix instead of "a/"'
complete -c git-show -l dst-prefix -d 'Show the given destination prefix instead of "b/"'
complete -c git-show -l no-prefix -d 'Do not show any source or destination prefix'
complete -c git-show -l default-prefix -d 'Use the default source and destination prefixes ("a/" and "b/")'
complete -c git-show -l line-prefix -d 'Prepend an additional prefix to every line of output'
complete -c git-show -l ita-invisible-in-index -d 'By default entries added by "git add -N" appear as an existing empty file in …'
complete -c git-show -l ita-visible-in-index -d 'For more detailed explanation on these common options, see also gitdiffcore(7)'
complete -c git-show -l - -d '+++ b/describe'

